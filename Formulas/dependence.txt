def f():
    df = column_values
    col1 = checked_column_names[0]
    col2 = unchecked_column_names[0]
    # ---create the contingency table---
    df_cont = pd.crosstab(index=df[col1], columns=df[col2])

    # ---calculate degree of freedom---
    degree_f = (df_cont.shape[0] - 1) * (df_cont.shape[1] - 1)
    # ---sum up the totals for row and columns---
    df_cont.loc[:, 'Total'] = df_cont.sum(axis=1)
    df_cont.loc['Total'] = df_cont.sum()
    all_len=df_cont.iloc[:-1, :-1].sum().sum()
    # ---create the expected value dataframe---
    df_exp = df_cont.copy()
    df_exp.iloc[:, :] = np.multiply.outer(
        df_cont.sum(1).values, df_cont.sum().values) / df_cont.sum().sum()

    # calculate chi-square values
    df_chi2 = ((df_cont - df_exp) ** 2) / df_exp
    df_chi2.loc[:, 'Total'] = df_chi2.sum(axis=1)
    df_chi2.loc['Total'] = df_chi2.sum()

    # ---get chi-square score---
    chi_square_score = df_chi2.iloc[:-1, :-1].sum().sum()
    contingency_coefficient_c = np.sqrt(chi_square_score / (all_len + chi_square_score))
    effective_size_w = np.sqrt(contingency_coefficient_c ** 2 / (1-contingency_coefficient_c ** 2))
    return pd.DataFrame({'effective_size_w': effective_size_w , 'contingency_coefficient_c' :contingency_coefficient_c}, index=['Dependence'])
